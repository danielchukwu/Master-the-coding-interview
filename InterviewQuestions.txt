1. Program: Given 2 arrays that are sorted, merge this two arrays into one big one
   Input  = [0, 3, 4, 31], [4, 6, 30]
   Output = [0, 3, 4, 4, 6, 30, 31]


2. Problem: Given an array of integers nums and an integer target, return indices of the two numbers such that 
   they add up to target.

   You may assume that each input would have exactly one solution, and you may not use the same element twice.

   You can return the answer in any order.
   Example 1:

   Input: nums = [2,7,11,15], target = 9
   Output: [0,1]
   Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
   Example 2:

   Input: nums = [3,2,4], target = 6
   Output: [1,2]
   Example 3:

   Input: nums = [3,3], target = 6
   Output: [0,1]

   
3. Problem: Given an integer array nums, find the contiguous subarray (containing at least one number) which has the 
   largest sum and return its sum.

   A subarray is a contiguous part of an array. 

   Example 1:

   Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
   Output: 6
   Explanation: [4,-1,2,1] has the largest sum = 6.
   Example 2:

   Input: nums = [1]
   Output: 1
   Example 3:

   Input: nums = [5,4,-1,7,8]
   Output: 23
   

   Constraints:

   1 <= nums.length <= 105
   -104 <= nums[i] <= 104
   

   Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


4. Problem: Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the
   non-zero elements.

   Note that you must do this in-place without making a copy of the array.

   Example 1:

   Input: nums = [0,1,0,3,12]
   Output: [1,3,12,0,0]
   Example 2:

   Input: nums = [0]
   Output: [0]
   

   Constraints:

   1 <= nums.length <= 104
   -231 <= nums[i] <= 231 - 1
   

   Follow up: Could you minimize the total number of operations done?


5. Problem: Given an integer array nums, return true if any value appears at least twice in the array, and return 
   false if every element is distinct.

   Example 1:

   Input: nums = [1,2,3,1]
   Output: true
   Example 2:

   Input: nums = [1,2,3,4]
   Output: false
   Example 3:

   Input: nums = [1,1,1,3,3,4,3,2,4,2]
   Output: true
   

   Constraints:

   1 <= nums.length <= 105
   -109 <= nums[i] <= 109
   Accepted
   1,907,335
   Submission

6. Problem: Given an array, rotate the array to the right by k steps, where k is non-negative
   Example 1:

   Input: nums = [1,2,3,4,5,6,7], k = 3
   Output: [5,6,7,1,2,3,4]
   Explanation:
   rotate 1 steps to the right: [7,1,2,3,4,5,6]
   rotate 2 steps to the right: [6,7,1,2,3,4,5]
   rotate 3 steps to the right: [5,6,7,1,2,3,4]
   Example 2:

   Input: nums = [-1,-100,3,99], k = 2
   Output: [3,99,-1,-100]
   Explanation: 
   rotate 1 steps to the right: [99,-1,-100,3]
   rotate 2 steps to the right: [3,99,-1,-100]
   

   Constraints:

   1 <= nums.length <= 105
   -231 <= nums[i] <= 231 - 1
   0 <= k <= 105
   

   Follow up:

   Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
   Could you do it in-place with O(1) extra space?


   Visit for the current link to problems
   file:///C:/Users/Daniel%20Chukwu/Desktop/Lectures/Udemy/Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/6.%20Data%20Structures%20Arrays/11.%20Interview%20Questions%20Arrays.html







Hash Tables 










Linked List
1. Problem: Given a linkedlist, how would you go about reversing the list. write a method to do this
   Example 1:

   Input:  [1, 10, 16, 18]
   Output: [18, 16, 10, 1]

   constraint : use a singly linked list

2. Problem: Go back to the Hash Table function and back where you created a Hash Table -> implement a Linked List Data 
   Structure