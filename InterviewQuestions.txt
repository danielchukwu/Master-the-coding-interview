1. Program: Given 2 arrays that are Sorted, merge this two arrays into one big one
   Input  = [0, 3, 4, 31], [4, 6, 30]
   Output = [0, 3, 4, 4, 6, 30, 31]


2. Problem: Given an array of integers nums and an integer target, return indices of the two numbers such that 
   they add up to target.

   You may assume that each input would have exactly one solution, and you may not use the same element twice.

   You can return the answer in any order.
   Example 1:

   Input: nums = [2,7,11,15], target = 9
   Output: [0,1]
   Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
   Example 2:

   Input: nums = [3,2,4], target = 6
   Output: [1,2]
   Example 3:

   Input: nums = [3,3], target = 6
   Output: [0,1]

   
3. Problem: Given an integer array nums, find the contiguous subarray (containing at least one number) which has the 
   largest sum and return its sum.

   A subarray is a contiguous part of an array. 

   Example 1:

   Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
   Output: 6
   Explanation: [4,-1,2,1] has the largest sum = 6.
   Example 2:

   Input: nums = [1]
   Output: 1
   Example 3:

   Input: nums = [5,4,-1,7,8]
   Output: 23
   

   Constraints:

   1 <= nums.length <= 105
   -104 <= nums[i] <= 104
   

   Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


4. Problem: Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the
   non-zero elements.

   Note that you must do this in-place without making a copy of the array.

   Example 1:

   Input: nums = [0,1,0,3,12]
   Output: [1,3,12,0,0]
   Example 2:

   Input: nums = [0]
   Output: [0]
   

   Constraints:

   1 <= nums.length <= 104
   -231 <= nums[i] <= 231 - 1
   

   Follow up: Could you minimize the total number of operations done?


5. Problem: Given an integer array nums, return true if any value appears at least twice in the array, and return 
   false if every element is distinct.

   Example 1:

   Input: nums = [1,2,3,1]
   Output: true
   Example 2:

   Input: nums = [1,2,3,4]
   Output: false
   Example 3:

   Input: nums = [1,1,1,3,3,4,3,2,4,2]
   Output: true
   

   Constraints:

   1 <= nums.length <= 105
   -109 <= nums[i] <= 109
   Accepted
   1,907,335
   Submission

6. Problem: Given an array, rotate the array to the right by k steps, where k is non-negative
   Example 1:

   Input: nums = [1,2,3,4,5,6,7], k = 3
   Output: [5,6,7,1,2,3,4]
   Explanation:
   rotate 1 steps to the right: [7,1,2,3,4,5,6]
   rotate 2 steps to the right: [6,7,1,2,3,4,5]
   rotate 3 steps to the right: [5,6,7,1,2,3,4]
   Example 2:

   Input: nums = [-1,-100,3,99], k = 2
   Output: [3,99,-1,-100]
   Explanation: 
   rotate 1 steps to the right: [99,-1,-100,3]
   rotate 2 steps to the right: [3,99,-1,-100]
   

   Constraints:

   1 <= nums.length <= 105
   -231 <= nums[i] <= 231 - 1
   0 <= k <= 105
   

   Follow up:

   Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
   Could you do it in-place with O(1) extra space?


   Visit for the current link to problems
   file:///C:/Users/Daniel%20Chukwu/Desktop/Lectures/Udemy/Master%20the%20Coding%20Interview%20Data%20Structures%20+%20Algorithms/6.%20Data%20Structures%20Arrays/11.%20Interview%20Questions%20Arrays.html







Hash Tables 










Linked List
1. Problem: Given a linkedlist, how would you go about reversing the list. write a method to do this
   Example 1:

   Input:  [1, 10, 16, 18]
   Output: [18, 16, 10, 1]

   constraint : use a singly linked list

2. Problem: Go back to the Hash Table function and back where you created a Hash Table -> implement a Linked List Data 
   Structure


LEETCODE: LINKED LIST 
3. Problem: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in 
   reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

   You may assume the two numbers do not contain any leading zero, except the number 0 itself.

   Example 1:
   Input: l1 = [2,4,3], l2 = [5,6,4]
   Output: [7,0,8]
   Explanation: 342 + 465 = 807.
   Example 2:

   Input: l1 = [0], l2 = [0]
   Output: [0]
   Example 3:

   Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
   Output: [8,9,9,9,0,0,0,1]
   
   Constraints:

   The number of nodes in each linked list is in the range [1, 100].
   0 <= Node.val <= 9
   It is guaranteed that the list represents a number that does not have leading zeros.
   Accepted
   3,004,830
   Submissions
   7,652,351

4. Problem: Given the head of a linked list, remove the nth node from the end of the list and return its head
   Example 1:

   Input: head = [1,2,3,4,5], n = 2
   Output: [1,2,3,5]
   Example 2:

   Input: head = [1], n = 1
   Output: []
   Example 3:

   Input: head = [1,2], n = 1
   Output: [1]

   Constraints:

   The number of nodes in the list is sz.
   1 <= sz <= 30
   0 <= Node.val <= 100
   1 <= n <= sz
   
   Follow up: Could you do this in one pass?

   Accepted
   1,568,229
   Submissions
   4,021,081








Stacks & Queues
1. Problem: Implement Queue Using Stacks
   Description: Implement the following operations of a queue using stacks 
   - push(x) -- push element x to the back of queue 
   - pop() -- removes the element from in front of queue 
   - peek() -- get the front element
   - empty() -- return whether the queue is empty
 
 
 


 
 
 Recursion
 1. Problem: Write two functions that finds the factorial of any number. One should use recursive, the other should just use a for loop 

 function findFactorialRecursive(number){
   // code here
   return answer
 }
 function findFactorialIterative(number){
   // code here
   return answer
 }

 2. Problem: Given a number N return the index value of thhe Fibonacci sequence, where the sequence is:
    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 ...
    The pattern of the sequence is that each value is the sum of the 2 previous values, that means N=5 -> 2+3

    function fibonacciIterative(n){
      //code here
    }
    fibonacciIterative(3)
    
    function fibonacciIterativeRecursive(n){
      //code here
    }
    fibonacciIterativeRecursive(3)

3. Problem: Implement a function that reverses a string using iteration...and then recursion!
   function reverseString(str) {

   }

   reverseString('yoyo mastery')
   //should return: 'yretsam oyoy'

4. Problem: Go back to the tree section and write a traversal function that prints out the entire branches of any 
   node it takes

   function traverse(node){
      // code here
}





Sorting 
1. Problem: Implement a Bubble Sort Algorithm 
   const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];

   function bubbleSort(array) {

   }

   bubbleSort(numbers);
   console.log(numbers);

2. Problem: Implement a selection Sort Algorithm 
   const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];

   function selectionSort(array){

   }

   selectionSort(numbers);
   console.log(numbers);

3. Problem: Implement an Insertion Sort Algorithm
   const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];

   function insertionSort(array){

   }

   insertionSort(numbers);
   console.log(numbers);

4. Problem: Implement a Merge Sort Algorithm 
   const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];

   function mergeSort(array){
      // base case
      if  (array.length === 1){
         return array;
      }
      // split Array into right and left

      // recursive case
      retun merge(mergeSort(left), mergeSort(right))
   }
   function merge(left, right){
   }

   const result = insertionSort(numbers);
   console.log(result);

5. Problem: Implement a Quick Sort Algoritm 
   const numbers = [99, 44, 6, 2, 1, 5, 63, 87, 283, 4, 0];

   function quickSort(array){

   }
   
   const result = quickSort(numbers);
   console.log(result);
   
